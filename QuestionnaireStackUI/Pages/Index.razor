@page "/"

@inject ICategoryData categoryData
@inject IStatusData statusdata
@inject IQuestionnaireData questionnaireData
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Index</PageTitle>

<h1>React Questionnaire</h1>
<div>
    <button>Questionnaire</button>
</div>

<div>
    <div> @questionnaire?.Count Questionnaire</div>
    <div class="flex justify-start p-3">

            <div class="px-2">
                <input type="text" placeholder="Search" 
                 aria-label="Search Box"
                 @oninput="((txt) => onSearchInput((string)txt.Value))" />
            </div>

        <div>
            <button class=""
            @onclick="(() => OrderByNew(true))">
                New
            </button>
            <button @onclick="(() => OrderByNew(false))">Popular</button>
        </div>
    </div>
</div>



<div class="flex justify-centent items-center ">
    <div class="w-3/5">
        @if(questionnaire is not null)
        {
            <Virtualize Items="@questionnaire" Context="item" OverscanCount="10">

                <div class=" shadow-md border-x-4 border-gray-100 p-4 m-2 rounded-lg shadow-slate-200">
                    <div class="flex justify-between">
                        <div class="cursor-pointer" @onclick="( () => VoteUp(item))">
                            <div>@GetUpVoteTopText(item)</div>
                            <span>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5" />
                                </svg>
                            </span>
                            <div> @GetUpVoteBottomText(item)</div>
                        </div>
                        <div>
                            <div class="cursor-pointer" @onclick="(() => OpenDetails(item))">
                                @item.QuestionnaireTitle
                            </div>
                            <div class="cursor-pointer" @onclick="(()=> OpenDetails(item))">
                                @item.Category?.CategoryName
                            </div>
                        </div>
                        <div>
                            <div>
                                @item.QuestionnaireStatus?.StatusName
                            </div>
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>

    <div class="shadow-md p-4 m-2">
        @if (categories is not null)
        {
            <div>Category </div>
            <div class="cursor-pointer" @onclick="(() => OnCategoryClick())"> All  </div>
            @foreach(var c in categories)
            {
                <div  @onclick="(() => OnCategoryClick(c.CategoryName))">
                    @c.CategoryName
                </div>
            }
        }

        @if (statuses is not null)
        {
            <div>Status </div>
            <div @onclick="(() => OnStatusClick())"> All  </div>
            @foreach (var s in statuses)
            {
                <div @onclick="(() => OnStatusClick(s.StatusName))">
                    @s.StatusName
                </div>
            }
        }
    </div>
</div>

@code{

    private UserModal loggedInUser;

    private List<QuestionnaireModel> questionnaire; 



    private List<CategoryModel> categories;

    private List<StatusModal> statuses;


    private string  selectedCategory = "All"; 
    private string selectedStatus = "All"; 
    private string searchText = ""; 
    bool isSortedByNew = true;

    protected async override  Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories(); 
        statuses = await statusdata.GetAllStatus() ;
        await LoadAndVerifyUser();
    }


    private async Task LoadAndVerifyUser()
    {
        var authSate = await authProvider.GetAuthenticationStateAsync();
        string objectId = authSate.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if(string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId)?? new(); // check if null, intintilate user

            string firstName = authSate.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authSate.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authSate.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authSate.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;


            bool isDirty = false;

            if (objectId.Equals(loggedInUser.ObjectIndentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIndentifier = objectId;
            }
            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName.Equals(loggedInUser.Lastname) == false)
            {
                isDirty = true;
                loggedInUser.Lastname = lastName;
            }
            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.Email) == false)
            {
                isDirty = true;
                loggedInUser.Email = email;
            }

            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }

        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState(); // get information from session storage from user brower. 
            await FilterQuestionnaire();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All"; 


        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";


        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterQuestionnaire()
    {
        var output = await questionnaireData.GetAllApprovedQuestionnaire(); 

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.QuestionnaireStatus?.StatusName == selectedStatus).ToList();
        }


        if(string.IsNullOrWhiteSpace(searchText) == false)
        {   // fuzzy matching 
            output = output.Where(s =>
                s.QuestionnaireTitle.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)  ||
                s.QuestionnaireDesc.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();

        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                             .ThenByDescending(s => s.DateCreated).ToList(); // when number of  votes are same orderby date created
        }

        questionnaire = output;

        await SaveFilterState();

    }



    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew; 
        await FilterQuestionnaire();
    }

    private async Task onSearchInput(string searchInput)
    {
        searchText =  searchInput;
        await FilterQuestionnaire(); 
    }

    private async Task OnCategoryClick (string category = "All")
    {
        selectedCategory = category;
        await FilterQuestionnaire();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status; 
        await FilterQuestionnaire();
    }


    private string GetUpVoteTopText(QuestionnaireModel questionnaire)
    {
        if (questionnaire.UserVotes?.Count > 0)
        {
            return questionnaire.UserVotes.Count.ToString("00");
        }
        else
        {
            if (questionnaire.Author.Id == loggedInUser?.Id)
            {
                return "Awating";
            }
            else
            {
                return "Click To";
            }
        }
    }


    private async Task VoteUp(QuestionnaireModel _questionnaire)
    {
        if (loggedInUser is not null)
        {
            //logged in 
            if (_questionnaire.Author.Id == loggedInUser.Id)
            {   
                // cannot vote on own questionnaire
                return;
            }

            // check if you can added the id in uservotes, if its not yours questionnarie. 
            if (_questionnaire.UserVotes.Add(loggedInUser.Id) == false)
            {
                // when you click again it removes it.
                _questionnaire.UserVotes.Remove(loggedInUser.Id);
            }

            await questionnaireData.UpVoteQuestionnaire(_questionnaire.Id, loggedInUser.Id);

            if(isSortedByNew == false)
            {
                questionnaire = questionnaire.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();

            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true); 
        }
    }


    private string GetUpVoteBottomText(QuestionnaireModel questionnaire)
    {
        if (questionnaire.UserVotes.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }

    }

    private void OpenDetails(QuestionnaireModel questionnaire)
    {
        navManager.NavigateTo($"/Details/{questionnaire.Id}");
    }

}