@page "/"

@inject ICategoryData categoryData
@inject IStatusData statusdata
@inject IQuestionnaireData questionnaireData
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Index</PageTitle>






<div class="relative basis-[75%] m-3 p-3">

    <div class="flex-none p-3">
        <div class="flex justify-center items-center">
            <h1 class="mb-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">
                Create and Attempt Quzzies
            </h1>
        </div>
    </div>
    <div class="flex justify-center ">
        @*  <div class="m-2 flex items-center justify-center rounded-md bg-white py-5 shadow-md">
        <input class="rounded-md border-2" type="text" placeholder="Search" aria-label="Search Box" @oninput="((txt) => onSearchInput((string)txt.Value))" />
        </div>*@
        <div class="relative mx-auto pt-2 text-gray-600">
            <input @oninput="((txt) => onSearchInput((string)txt.Value))" class="h-10 rounded-lg border-2 border-gray-300 bg-white px-5 pr-16 text-sm focus:outline-none" type="search" name="search" placeholder="Search" />
            <div type="submit" class="absolute right-0 top-0 mr-4 mt-5">
                <svg class="h-4 w-4 fill-current text-gray-600" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 56.966 56.966" style="enable-background:new 0 0 56.966 56.966;" xml:space="preserve" width="512px" height="512px">
                <path d="M55.146,51.887L41.588,37.786c3.486-4.144,5.396-9.358,5.396-14.786c0-12.682-10.318-23-23-23s-23,10.318-23,23  s10.318,23,23,23c4.761,0,9.298-1.436,13.177-4.162l13.661,14.208c0.571,0.593,1.339,0.92,2.162,0.92  c0.779,0,1.518-0.297,2.079-0.837C56.255,54.982,56.293,53.08,55.146,51.887z M23.984,6c9.374,0,17,7.626,17,17s-7.626,17-17,17  s-17-7.626-17-17S14.61,6,23.984,6z" />
          </svg>
            </div>
        </div>
    </div>

    <div class="flex justify-end">
        <div class="relative m-2">
            <div class="flex justify-end">
                <button class="rounded-lg bg-black px-3 py-2 text-white mr-2 hover:bg-slate-100 hover:text-black" @onclick="(() => OrderByNew(true))">New</button>
                <button class="rounded-lg bg-black px-3 py-2 text-white hover:bg-slate-100 hover:text-black" @onclick="(() => OrderByNew(false))">Popular</button>
            </div>
        </div>
    </div>

    <div class="flex justify-between lg:flex-row flex-col-reverse md:flex-row">

        <div class="grow relative ">
            <div class="bg-g m-2 flex rounded-md border-2 bg-gray-100 p-4 cursor-pointer hover:bg-slate-100" @onclick="() =>CreateQuestionnaire()">
                <span class="px-3">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                    </svg>
                </span>
                Create Questionnaire
            </div>
            @if (questionnaire is not null)
            {
                <Virtualize Items="@questionnaire" Context="item" OverscanCount="10">
                    <div class="relative m-3 flex justify-between rounded-lg bg-white p-4 shadow-lg ">
                        <div class=" flex  flex-col items-center m-3 rounded-lg p-2 cursor-pointer" @onclick="( () => VoteUp(item))">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5" />
                            </svg>

                            <div class="text-gray-600">@GetUpVoteTopText(item)</div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                            </svg>
                        </div>

                        <div class="flex justify-center items-center flex-col">
                            <div class="cursor-pointer font-bold text-xl" @onclick="(() => OpenDetails(item))">@item.QuestionnaireTitle</div>
                            <div class="cursor-pointer text-gray-500" @onclick="(()=> OpenDetails(item))">@item.Category?.CategoryName</div>
                        </div>
                        <div>
                            <div class="text-gray-500">@item.QuestionnaireStatus?.StatusName</div>
                        </div>
                    </div>

                </Virtualize>
            }


        </div>

        <div class="relative place-self-auto">
            <div>
                <div class="m-3 rounded-md bg-white p-4 shadow-lg border-l-8 border-black">
                    @if (categories is not null)
                    {
                        <div class="font-bold">Category</div>
                        <div class="cursor-pointer" @onclick="(() => OnCategoryClick())">All</div>
                        @foreach (var c in categories)
                        {
                            <div class="cursor-pointer" @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
                        }
                    }
                </div>
                <div class="m-3 rounded-md bg-white p-4 shadow-lg border-l-8 border-black">
                    @if (statuses is not null)
                    {
                        <div class="font-bold">Status</div>
                        <div class="cursor-pointer" @onclick="(() => OnStatusClick())">All</div>
                        @foreach (var s in statuses)
                        {
                            <div class="cursor-pointer" @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code{

    private UserModal loggedInUser;

    private List<QuestionnaireModel> questionnaire; 



    private List<CategoryModel> categories;

    private List<StatusModal> statuses;


    private string  selectedCategory = "All"; 
    private string selectedStatus = "All"; 
    private string searchText = ""; 
    bool isSortedByNew = true;

    protected async override  Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories(); 
        statuses = await statusdata.GetAllStatus() ;
        await LoadAndVerifyUser();
    }


    private async Task LoadAndVerifyUser()
    {
        var authSate = await authProvider.GetAuthenticationStateAsync();
        string objectId = authSate.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if(string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId)?? new(); // check if null, intintilate user

            string firstName = authSate.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authSate.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authSate.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authSate.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;


            bool isDirty = false;

            if (objectId.Equals(loggedInUser.ObjectIndentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIndentifier = objectId;
            }
            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName.Equals(loggedInUser.Lastname) == false)
            {
                isDirty = true;
                loggedInUser.Lastname = lastName;
            }
            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.Email) == false)
            {
                isDirty = true;
                loggedInUser.Email = email;
            }

            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }

        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState(); // get information from session storage from user brower. 
            await FilterQuestionnaire();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All"; 


        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";


        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterQuestionnaire()
    {
        var output = await questionnaireData.GetAllApprovedQuestionnaire(); 

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.QuestionnaireStatus?.StatusName == selectedStatus).ToList();
        }


        if(string.IsNullOrWhiteSpace(searchText) == false)
        {   // fuzzy matching 
            output = output.Where(s =>
                s.QuestionnaireTitle.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)  ||
                s.QuestionnaireDesc.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();

        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                             .ThenByDescending(s => s.DateCreated).ToList(); // when number of  votes are same orderby date created
        }

        questionnaire = output;

        await SaveFilterState();

    }



    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew; 
        await FilterQuestionnaire();
    }

    private async Task onSearchInput(string searchInput)
    {
        searchText =  searchInput;
        await FilterQuestionnaire(); 
    }

    private async Task OnCategoryClick (string category = "All")
    {
        selectedCategory = category;
        await FilterQuestionnaire();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status; 
        await FilterQuestionnaire();
    }


    private string GetUpVoteTopText(QuestionnaireModel questionnaire)
    {
        if (questionnaire.UserVotes?.Count > 0)
        {
            return questionnaire.UserVotes.Count.ToString("00");
        }
        else
        {
            if (questionnaire.Author.Id == loggedInUser?.Id)
            {
                return "Awating";
            }
            else
            {
                return "Vote";
            }
        }
    }


    private async Task VoteUp(QuestionnaireModel _questionnaire)
    {
        if (loggedInUser is not null)
        {
            //logged in 
            if (_questionnaire.Author.Id == loggedInUser.Id)
            {   
                // cannot vote on own questionnaire
                return;
            }

            // check if you can added the id in uservotes, if its not yours questionnarie. 
            if (_questionnaire.UserVotes.Add(loggedInUser.Id) == false)
            {
                // when you click again it removes it.
                _questionnaire.UserVotes.Remove(loggedInUser.Id);
            }

            await questionnaireData.UpVoteQuestionnaire(_questionnaire.Id, loggedInUser.Id);

            if(isSortedByNew == false)
            {
                questionnaire = questionnaire.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();

            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true); 
        }
    }


    private string GetUpVoteBottomText(QuestionnaireModel questionnaire)
    {
        if (questionnaire.UserVotes.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }

    }

    private void OpenDetails(QuestionnaireModel questionnaire)
    {
        navManager.NavigateTo($"/Details/{questionnaire.Id}");
    }
  

    private void CreateQuestionnaire()
    {
        navManager.NavigateTo("/Create");
    }
}