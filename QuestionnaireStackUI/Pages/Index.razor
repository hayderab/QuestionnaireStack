@page "/"

@inject ICategoryData categoryData
@inject IStatusData statusdata
@inject IQuestionnaireData questionnaireData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@code{
    private List<QuestionnaireModel> questionnaire; 

    private List<CategoryModel> categories;

    private List<StatusModal> statuses;


    private string  selectedCategory = "All"; 
    private string selectedStatus = "All"; 
    private string searchText = ""; 
    bool isSortedByNew = true;

    protected async override  Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories(); 
        statuses = await statusdata.GetAllStatus() ;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState(); // get information from session storage from user brower. 
            await FilterQuestionnaire();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All"; 


        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";


        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedStatus);
        await sessionStorage.SetAsync(nameof(selectedCategory), searchText);
        await sessionStorage.SetAsync(nameof(selectedCategory), isSortedByNew);

    }

    private async Task FilterQuestionnaire()
    {
        var output = await questionnaireData.GetAllApprovedQuestionnaire(); 

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.QuestionnaireStatus?.StatusName == selectedStatus).ToList();
        }


        if(string.IsNullOrWhiteSpace(searchText) == false)
        {   // fuzzy matching 
            output = output.Where(s =>
                s.QuestionnaireTitle.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)  ||
                s.QuestionnaireDesc.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();

        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                             .ThenByDescending(s => s.DateCreated).ToList(); // when number of  votes are same orderby date created
        }

        questionnaire = output;

        await SaveFilterState();

    }



    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew; 
        await FilterQuestionnaire();
    }

    private async Task onSearchInput(string searchInput)
    {
        searchText =  searchInput;
        await FilterQuestionnaire(); 
    }

    private async Task OnCategoryClick (string category = "All")
    {
        selectedCategory = category;
        await FilterQuestionnaire();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status; 
        await FilterQuestionnaire();
    }


    private string GetUpVoteTopText(QuestionnaireModel questionnaire)
    {
        if (questionnaire.UserVotes.Count > 0)
        {
            return questionnaire.UserVotes.Count.ToString("00");
        }
        else
        {
            return "Click To";
        }
    }

    private string GetUpVoteBottomText(QuestionnaireModel questionnaire)
    {
        if (questionnaire.UserVotes.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(BasicQuestionnaireModel questionnaire)
    {
        navManager.NavigateTo($"/Details/{questionnaire.Id}");
    }

}