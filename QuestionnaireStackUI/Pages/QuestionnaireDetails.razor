@page "/Details/{Id}"
@inject IQuestionnaireData questionnaireData
@inject IUserData userData

@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider

<div class="relative basis-[75%] m-3 p-3 bg-white rounded-lg shadow-md">
    <h3>Questionnaire Details</h3>
    <div class="flex justify-end ">
        <button class="px-4 py-2 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300" @onclick="ClosePage">Close Page </button>
    </div>
    <div >
      
        @if(questionnaire is not null && questionnaire.Questions is not null)
        {

            <div class="relative">
                <div class="bg-white shadow-md rounded-lg m-3 p-3 border-b-4  border-black ">
                    <div class="flex items-center justify-between mb-3">
                        <div class="flex items-center cursor-pointer" @onclick="VoteUp">
                            <div class="text-gray-600">@GetUpVoteTopText()</div>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6 ml-1">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5" />
                            </svg>
                            <div class="text-gray-600">@GetUpVoteBottomText()</div>
                        </div>
                        <div class="text-gray-600">@questionnaire.DateCreated.ToString("MM.dd.yyyy")</div>
                    </div>
                    <div>
                        <h4 class="text-xl font-semibold mb-2">@questionnaire.QuestionnaireTitle</h4>
                        <div class="text-gray-600 mb-2">
                            <div>@questionnaire.Author.DisplayName</div>
                            <div>@questionnaire.QuestionnaireDesc</div>
                            <div>@questionnaire.Category.CategoryName</div>
                        </div>
                    </div>
                </div>


                <div class="relative bg-white shadow-md rounded-lg m-3 p-3">
                    @foreach (var (question, questionIndex) in questionnaire.Questions.Select((q, idx) => (q, idx)))
                    {
                        <div class="relative bg-white rounded-lg m-3 p-3">
                            <p>@question.Question</p>

                            @foreach (var (option, optionIndex) in question.Options.Select((opt, idx) => (opt, idx)))
                            {
                                <div @onclick="() => selectedAnswerIndices[questionIndex] = optionIndex">
                                    <div class="ring-2 ring-gray-500 relative flex bg-gray-100 items-center border-2 mb-2 rounded-lg shadow-sm m-3 p-2 @(selectedAnswerIndices.TryGetValue(questionIndex, out int selectedOptionIndex) && selectedOptionIndex == optionIndex ? "bg-blue-400" : "") ">
                                        <div id="answer_(@questionIndex,@optionIndex)"  class="mr-2"  >
                                            <div class="px-3 py-2 rounded-lg cursor-pointer ">
                                                @option.Option
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            }
                        </div>
                    }

                </div>
            
            
            
            </div>

            <button @onclick="CalculateResults">Submit</button>

        }
        @if (showResults )
        {
            <h2>Results:</h2>
            <p>Overall Score: @CalculateOverallScore() / @questionnaire.Questions.Count</p>
            @foreach (var (question, questionIndex) in questionnaire.Questions.Select((q, idx) => (q, idx)))
            {
                <p>
                    @question.Question<br />
                    Selected Answer: @question.Options[selectedAnswerIndices[questionIndex]].Option<br />
                    Correct Answer: @question.Options[question.CorrectAnswerIndex].Option
                    <span class="@GetAnswerStatusClass(question, selectedAnswerIndices[questionIndex])">@GetAnswerStatusText(question, selectedAnswerIndices[questionIndex])</span>
                </p>
            }
        }


    </div>
</div>

@if(questionnaire?.QuestionnaireStatus is not null)
{
    <div>
        <div>
            <div>

            </div>
            <div> 
                <div>
                    @questionnaire.QuestionnaireStatus.StatusName
                </div>
                <div>
                    @((MarkupString)questionnaire.OwnerNotes);
                </div>
            </div>
        </div>
    </div>
}
@code {
    private UserModal loggedInUser;
    private int selectedOptionIndex = -1;
    private bool showResults = false;
    private bool selectedOption = false;
    private int questionId = 0;
    [Parameter]
    public string Id { get; set; }

    private QuestionnaireModel questionnaire;

    private Dictionary<int, int> selectedAnswerIndices = new Dictionary<int, int>();

    protected async override Task OnInitializedAsync()
    {
        questionnaire = await questionnaireData.GetQuestionnaire(Id);
        loggedInUser = await authProvider.GerUserFromAuth(userData);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/"); 
    }




    
   

    private async Task VoteUp()
    {
        if (loggedInUser is not null)
        {
            //logged in
            if (questionnaire.Author.Id == loggedInUser.Id)
            {
                // cannot vote on own questionnaire
                return;
            }

            // check if you can added the id in uservotes, if its not yours questionnarie.
            if (questionnaire.UserVotes.Add(loggedInUser.Id) == false)
            {
                // when you click again it removes it.
                questionnaire.UserVotes.Remove(loggedInUser.Id);
            }

            await questionnaireData.UpVoteQuestionnaire(questionnaire.Id, loggedInUser.Id);

        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }


    private string GetUpVoteTopText()
    {
        if (questionnaire.UserVotes.Count > 0)
        {
            return questionnaire.UserVotes.Count.ToString("00");
        }
        else
        {

            if (questionnaire.Author.Id == loggedInUser?.Id)
            {
                return "Awating";
            }
            else
            {
                return "Click To";
            }
        }
    }

    private string GetUpVoteBottomText()
    {
        if (questionnaire.UserVotes.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }


    private void CalculateResults()

    {
        if (selectedAnswerIndices.Count >= questionnaire.Questions.Count)
        {
            showResults = true;

        }
    }

    private int CalculateOverallScore()
    {
        int score = 0;
        int questionIndex = 0; // Initialize the question index
        foreach (var question in questionnaire.Questions)
        {
            if (selectedAnswerIndices.TryGetValue(questionIndex, out int selectedOptionIndex)
                && selectedOptionIndex == question.CorrectAnswerIndex)
            {
                score++;
            }
            questionIndex++; // Increment the question index
        }
        return score;
    }

    private string GetAnswerStatusClass(QuestionModel question, int selectedOptionIndex)
    {
        return selectedOptionIndex == question.CorrectAnswerIndex ? "text-green-500" : "text-red-500";
    }

    private string GetAnswerStatusText(QuestionModel question, int selectedOptionIndex)
    {
        return selectedOptionIndex == question.CorrectAnswerIndex ? "Correct" : "Incorrect";
    }



}
