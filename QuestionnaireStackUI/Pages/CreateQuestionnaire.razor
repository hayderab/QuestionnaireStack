@page "/Create"
@attribute [Authorize]
@using QuestionnaireStackUI.Components
@using QuestionnaireStackUI.Models
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IQuestionnaireData questionnaireData
@inject IUserData userData
@inject NavigationManager navManager


<div class=" relative max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
    <h3 class="text-2xl font-semibold mb-4">Create Questionnaire</h3>

    <div>
        <div class="flex justify-end">
            <button class="px-4 py-2 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300" @onclick="ClosePage">Close Page</button>
        </div>
        @if (categories is not null)
        {
            <EditForm Model="questionnaire">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-4">
                    <label for="questionnaire-text" class="text-lg font-semibold">Title</label>
                    <div class="text-gray-500 mb-2">Add a title for the questionnaire</div>
                    <InputText id="questionnaire-text" class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500" @bind-Value="questionnaire.QuestionnaireTitle"></InputText>
                </div>
                <div class="mb-4">
                    <label for="category" class="text-lg font-semibold">Category</label>
                    <div class="text-gray-500 mb-2">Choose one category</div>
                    <div>
                        <MyInputRadioGroup id="category" @bind-Value="questionnaire.CategoryId">
                            @foreach (var c in categories)
                            {
                                <div class="flex items-center mb-2">
                                    <InputRadio Value="@c.Id" id="@c.Id" class="mr-2" />
                                    <label for="@c.Id" class="text-gray-700">@c.CategoryName - @c.CategoryDescription</label>
                                </div>
                            }
                        </MyInputRadioGroup>
                    </div>
                </div>
                <div class="mb-4">
                    <label for="message" class="text-lg font-semibold">Description</label>
                    <InputTextArea class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Provide a description about the questionnaire" rows="5" id="questionnaire-desc" @bind-Value="questionnaire.QuestionnaireDesc"></InputTextArea>
                </div>
                <div>
                    <label for="question" class="text-lg font-semibold">Question</label>
                    <input class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-2" type="text" @bind="question.Question" />

                    @foreach (var option in question.Options)
                    {
                        <div class="flex items-center mb-2">
                            <input type="radio" class="mr-2" disabled />
                            <div>@option.Option</div>
                        </div>
                    }

                    @if (question.Options.Count < 4)
                    {
                        <div class="flex items-center mb-2">
                            <input type="text" class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 mr-2" @bind="option" />
                            <button class="px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600" @onclick="AddOption">Add Option</button>
                        </div>
                    }

                    @if (question.Options.Count == 4)
                    {
                        <div class="flex items-center mb-2">
                            <label for="answer" class="text-gray-700 mr-2">Add answer (0 - @(question.Options.Count - 1))</label>
                            <input class="w-12 px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 mr-2" type="number" min="0" max="@(question.Options.Count - 1)" @bind="question.CorrectAnswerIndex" />
                        </div>

                        <button class="px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600" @onclick="AddQuestion">Add Question</button>
                    }

                    @foreach (var q in questions)
                    {
                        <h4 class="text-lg font-semibold mt-4 mb-2">@q.Question</h4>
                        @foreach (var option in q.Options)
                        {
                            <p>@option.Option</p>
                        }
                    }

              @*      <div class="mt-4">
                        <button class="px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600" @onclick="SubmitQuestions">Submit Questions</button>
                    </div>*@
                </div>
                <div>
                    <button class="px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600 mt-4" type="submit" @onclick="CreateQuestionnaireData">Create Questionnaire</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {

    private CreateQuestionnaireModel questionnaire = new();

    //private List<QuestionModel> questions; 

    private List<CategoryModel> categories;
    private QuestionModel question = new QuestionModel();
    private UserModal loggedInUser;
    private string option;
    public int CorrectAnswerIndex { get; set; } // Index of the selected answer within the Options list



    private List<QuestionModel> questions = new List<QuestionModel>();

    private void AddOption()
    {
        if (!string.IsNullOrEmpty(option))
        {
            question.Options.Add(new OptionModel { Option = option });
            option = string.Empty;
        }
    }


    private void AddQuestion()
    {
        questions.Add(new QuestionModel
            {
                Question = question.Question,
                Options = question.Options.ToList(),
                CorrectAnswerIndex = question.CorrectAnswerIndex
            });

        question = new QuestionModel();
    }




    private void SubmitQuestions()
    {
        // Perform any necessary operations with the submitted questions
        // ...
        foreach (var q in questions)
        {
            Console.WriteLine("Question: " + q.Question);
            Console.WriteLine("Options:");
            foreach (var option in q.Options)
            {
                Console.WriteLine(option.Option);
            }
            Console.WriteLine();
        }

        // Clear the questions list after submission
        questions.Clear();
    }




    protected  async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();

        loggedInUser = await authProvider.GerUserFromAuth(userData);

    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }


    private async Task CreateQuestionnaireData()
    {
        QuestionnaireModel s = new();
        s.QuestionnaireTitle = questionnaire.QuestionnaireTitle;
        s.QuestionnaireDesc = questionnaire.QuestionnaireDesc; 
        s.Author = new BasicUserModal(loggedInUser); 
        s.Category = categories.Where(c => c.Id == questionnaire.CategoryId).FirstOrDefault();
        s.Questions.AddRange(questions);

        if(s.Category is null)
        {
            questionnaire.CategoryId = ""; 
            return ;
        }
        await questionnaireData.CreateQuestionnaire(s);
        questionnaire = new(); 
        ClosePage();

    }



}
